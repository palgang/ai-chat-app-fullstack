name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend_python/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend_python
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov httpx
    
    - name: Lint with flake8
      run: |
        cd backend_python
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        cd backend_python
        pytest --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend_python/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend_react/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend_react
        npm ci
    
    - name: Lint with ESLint
      run: |
        cd frontend_react
        npm run lint
    
    - name: Run tests
      run: |
        cd frontend_react
        npm run test:ci
    
    - name: Build application
      run: |
        cd frontend_react
        npm run build
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend_react/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend_react/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend_python
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      run: |
        cd frontend_react
        npm ci
    
    - name: Start backend server
      run: |
        cd backend_python
        uvicorn chatapi:app --host 0.0.0.0 --port 8000 &
        sleep 5
    
    - name: Build frontend
      run: |
        cd frontend_react
        npm run build
    
    - name: Test API endpoints
      run: |
        # Test if backend is running
        curl -f http://localhost:8000/docs || exit 1
        curl -f http://localhost:8000/ || exit 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [backend-tests, frontend-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./backend_python/Dockerfile
        push: false
        tags: ai-chat-backend:latest
    
    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./frontend_react/Dockerfile
        push: false
        tags: ai-chat-frontend:latest
